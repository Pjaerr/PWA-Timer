'use strict'; var storage = window.localStorage; function initialiseServiceWorker() { 'serviceWorker' in navigator ? navigator.serviceWorker.register('./service-worker.js').then(function () { console.log('Service Worker Registered') }) : window.alert('Your browser doesn\'t support service workers, the app may not work.') } function makeTimeString(a) { return a = a.toString(), 10 > a && (a = '0' + a), a } function Timer() { this.hhHtml = document.getElementById('hh'), this.mmHtml = document.getElementById('mm'), this.ssHtml = document.getElementById('ss'); let a = !1; this.changeState = function () { !1 == !a ? $('#changeStateBtn').html('<i class=\'material-icons\'>play_arrow</i>') : $('#changeStateBtn').html('<i class=\'material-icons\'>pause</i>'), a = !a, web_worker.postMessage(['state_change', a]), setAllStorage() }, this.reset = function () { web_worker.postMessage(['reset']), this.hhHtml.innerText = '00', this.mmHtml.innerText = '00', this.ssHtml.innerText = '00', a && this.changeState(), setAllStorage() } } let timer = new Timer; $('#changeStateBtn').click(function () { timer.changeState() }), $('#resetBtn').click(function () { timer.reset() }); function updateTimer(a) { switch (a.type) { case 'ss': timer.ssHtml.innerText = makeTimeString(a.value), 0 == a.value % 10 && setAllStorage(); break; case 'mm': timer.mmHtml.innerText = makeTimeString(a.value), reminderData.minutesPassed++; break; case 'hh': timer.hhHtml.innerText = makeTimeString(a.value), reminderData.hoursPassed++; }reminderData.intervalHasPassed() && (reminderData.sound.play(), reminderData.hoursPassed = 0, reminderData.minutesPassed = 0) } function Reminder() { if (this.sound = new Audio('alarm.mp3'), this.hoursPassed = 0, this.minutesPassed = 0, this.reminderInterval = [], this.isEnabled = !1, this.setReminderInterval = function (a, b, c) { c = c || !1, this.reminderInterval[0] = a, this.reminderInterval[1] = b, this.isEnabled = 0 !== a || 0 !== b, c || storage.setItem('interval', this.reminderInterval[0].toString() + ',' + this.reminderInterval[1].toString()) }, this.intervalHasPassed = function () { return this.isEnabled && this.hoursPassed === this.reminderInterval[0] && this.minutesPassed === this.reminderInterval[1] }, null === storage.getItem('interval') || void 0 === storage.getItem('interval')) this.setReminderInterval(0, 0); else { let a = storage.getItem('interval').split(','); this.setReminderInterval(parseInt(a[0]), parseInt(a[1]), !0) } } let reminderData = new Reminder; function switchDisplay() { let a = document.getElementById('timer-container').style.display, b = document.getElementById('settings-container').style.display; $('#timer-container').css('display', b), $('#settings-container').css('display', a) } $('#applyBtn').click(function () { reminderData.setReminderInterval(parseInt($('#hoursSelect').val()), parseInt($('#minutesSelect').val())), switchDisplay() }), $('#settingsBtn').click(function () { switchDisplay() }), $('#backBtn').click(function () { switchDisplay() }), $('#hoursSelect').val(reminderData.reminderInterval[0]).change(), $('#minutesSelect').val(reminderData.reminderInterval[1]).change(); let web_worker; function startBackgroundProcess() { 'undefined' == typeof Worker ? window.alert('Browser not supported..') : ('undefined' == typeof web_worker && (web_worker = new Worker('background_process.js')), web_worker.onmessage = function (a) { updateTimer(a.data) }) } function setAllStorage() { storage.setItem('hh', timer.hhHtml.innerText), storage.setItem('mm', timer.mmHtml.innerText), storage.setItem('ss', timer.ssHtml.innerText) } function init() { startBackgroundProcess(), null === storage.getItem('ss') || storage.getItem('ss') === void 0 ? setAllStorage() : (timer.hhHtml.innerText = storage.getItem('hh'), timer.mmHtml.innerText = storage.getItem('mm'), timer.ssHtml.innerText = storage.getItem('ss'), web_worker.postMessage(['update_from_storage', parseInt(timer.hhHtml.innerText), parseInt(timer.mmHtml.innerText), parseInt(timer.ssHtml.innerText)])), initialiseServiceWorker(), window.addEventListener('beforeunload', function () { return setAllStorage(), null }) } init();